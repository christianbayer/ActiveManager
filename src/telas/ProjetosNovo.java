/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import classes.Project;
import classes.User;
import classes.UserProject;
import dao.ProjectDAO;
import dao.ProjectTypeDAO;
import dao.UserDAO;
import dao.UserProjectDAO;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTextField;

/**
 *
 * @author christian
 */
public class ProjetosNovo extends javax.swing.JPanel {

    ProjectDAO projectDAO;
    UserDAO userDAO;
    ProjectTypeDAO projectTypeDAO;
    UserProjectDAO userProjectDAO;
    Color errorColor;
    Color normalColor;
    ArrayList errorsList;
    CardLayout layoutController;
    JPanel cardPanel;
    JLabel btnBack;
    JLabel lblWindow;
    Projetos projetos;
    Project project;
    User user;

    /**
     * Creates new form ProjetosListagem
     */
    public ProjetosNovo(JLabel btnBack, JLabel lblWindow, CardLayout lController, JPanel cardPanel, Project project, User user) {
        initComponents();

        // Seta o título da janela
        lblWindow.setText("NOVO PROJETO");

        // Troca o action do botão "Voltar"
        btnBack.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                projetos = new Projetos(btnBack, lblWindow, layoutController, cardPanel, user);
                cardPanel.add(projetos, "projetos");
                layoutController = ((CardLayout) cardPanel.getLayout());
                layoutController.show(cardPanel, "projetos");
            }
        });

        // Inicializa as variáveis de tela
        this.btnBack = btnBack;
        this.lblWindow = lblWindow;
        this.cardPanel = cardPanel;
        this.layoutController = lController;
        this.user = user;

        // Inicializa as cores;
        errorColor = new Color(255, 0, 0);
        normalColor = new Color(60, 60, 60);

        // Inicializa os DAO's
        projectDAO = new ProjectDAO();
        userDAO = new UserDAO();
        projectTypeDAO = new ProjectTypeDAO();
        userProjectDAO = new UserProjectDAO();
        
        // Inicia a lista de erros
        errorsList = new ArrayList();

        // Popula o combobox com os papéis
        userDAO.lists(selManager, "Gerente");
        projectTypeDAO.lists(selProjectType, "Tipo de Projeto");

        // Edição
        if (project.getTitle() != null) {
            this.project = project;

            // Seta o título da janela
            lblWindow.setText("EDITAR PROJETO");

            // Inicializa os campos
            inpTitle.setText(project.getTitle());
            selManager.setSelectedIndex(project.getManagerId());
            selProjectType.setSelectedIndex(project.getProjectTypeId());
            txtDescription.setText(project.getDescription());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        basePanel = new javax.swing.JPanel();
        inpTitle = new javax.swing.JTextField();
        sepTitle = new javax.swing.JSeparator();
        selProjectType = new javax.swing.JComboBox<>();
        selManager = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        listErrors = new javax.swing.JList<>();

        setBackground(new java.awt.Color(254, 254, 254));
        setPreferredSize(new java.awt.Dimension(800, 540));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        basePanel.setBackground(new java.awt.Color(254, 254, 254));
        basePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        inpTitle.setBackground(new java.awt.Color(254, 254, 254));
        inpTitle.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        inpTitle.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        inpTitle.setText("Título");
        inpTitle.setBorder(null);
        inpTitle.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        inpTitle.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inpTitleFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                inpTitleFocusLost(evt);
            }
        });
        basePanel.add(inpTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 740, 20));

        sepTitle.setBackground(new java.awt.Color(103, 103, 103));
        sepTitle.setForeground(new java.awt.Color(29, 29, 29));
        sepTitle.setFont(new java.awt.Font("Ubuntu", 0, 3)); // NOI18N
        basePanel.add(sepTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 730, 1));

        selProjectType.setBackground(new java.awt.Color(254, 254, 254));
        selProjectType.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        selProjectType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo de Projeto" }));
        selProjectType.setToolTipText("");
        selProjectType.setOpaque(false);
        selProjectType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selProjectTypeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                selProjectTypeFocusLost(evt);
            }
        });
        basePanel.add(selProjectType, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 740, -1));

        selManager.setBackground(new java.awt.Color(254, 254, 254));
        selManager.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        selManager.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gerente" }));
        selManager.setToolTipText("");
        selManager.setOpaque(false);
        selManager.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selManagerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                selManagerFocusLost(evt);
            }
        });
        basePanel.add(selManager, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 740, -1));

        btnSave.setBackground(new java.awt.Color(52, 100, 127));
        btnSave.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(254, 254, 254));
        btnSave.setText("SALVAR");
        btnSave.setToolTipText("");
        btnSave.setBorderPainted(false);
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnSave.setDefaultCapable(false);
        btnSave.setName(""); // NOI18N
        btnSave.setOpaque(true);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        basePanel.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 440, 90, 40));

        jScrollPane2.setBorder(null);

        txtDescription.setBackground(new java.awt.Color(254, 254, 254));
        txtDescription.setColumns(20);
        txtDescription.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        txtDescription.setForeground(new java.awt.Color(29, 29, 29));
        txtDescription.setRows(5);
        txtDescription.setText("Descrição");
        txtDescription.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(29, 29, 29)));
        txtDescription.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDescriptionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDescriptionFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(txtDescription);

        basePanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 740, 136));

        jScrollPane4.setBorder(null);

        listErrors.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        listErrors.setForeground(new java.awt.Color(255, 0, 0));
        listErrors.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listErrors.setToolTipText("");
        listErrors.setFocusable(false);
        listErrors.setRequestFocusEnabled(false);
        jScrollPane4.setViewportView(listErrors);

        basePanel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, 640, 140));

        add(basePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 510));
    }// </editor-fold>//GEN-END:initComponents

    private void inpTitleFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inpTitleFocusGained
        if (inpTitle.getText().trim().equals("Título")) {
            inpTitle.setText("");
            inpTitle.setForeground(normalColor);
            sepTitle.setForeground(normalColor);
        }
    }//GEN-LAST:event_inpTitleFocusGained

    private void inpTitleFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inpTitleFocusLost
        validateTitle();
    }//GEN-LAST:event_inpTitleFocusLost

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // Inicia a lista de erros
        errorsList = new ArrayList();

        // Cria uma lista padrão
        DefaultListModel listModel = new DefaultListModel();

        validateTitle();
        validateProjectType();
        validateManager();
        validateDescription();

        if (!errorsList.isEmpty()) {
            for (int i = 0; i < errorsList.size(); i++) {
                listModel.add(i, errorsList.get(i));
            }
            listErrors.setModel(listModel);
        } else {
            Project project = new Project();
            project.setTitle(inpTitle.getText());
            project.setDescription(txtDescription.getText());
            project.setProjectTypeId(selProjectType.getSelectedIndex());
            project.setManagerId(selManager.getSelectedIndex());

            if (this.project != null) {
                project.setId(this.project.getId());
                project.setUpdatedBy(this.user.getId());
                projectDAO.update(project);
            } else {
                project.setCreatedBy(this.user.getId());
                project.setUpdatedBy(this.user.getId());
                projectDAO.save(project);
            }

            project = (Project) projectDAO.getQuery("SELECT * FROM projects WHERE title=\""+project.getTitle()+"\"");

            ArrayList<Integer> usersProjectsUsersIds = new ArrayList();
            ArrayList<Object> usersProjects = userProjectDAO.getQuerys("SELECT * FROM users_projects WHERE project_id=" + project.getId() + " AND active=1;");
            Iterator<Object> iterator = usersProjects.iterator();
            boolean alreadyExists = false;
            while (iterator.hasNext()) {
                UserProject userProject = (UserProject) iterator.next();
                System.out.println(userProject.getUserName());
                if (userProject.getUserId() == project.getManagerId()) {
                    System.out.println("entrou");
                    alreadyExists = true;
                }
            }
            
            System.out.println(alreadyExists);

            if (!alreadyExists) {
                UserProject userProject = new UserProject();
                userProject.setUserId(project.getManagerId());
                userProject.setProjectId(project.getId());
                userProjectDAO.save(userProject);
            }

            projetos = new Projetos(btnBack, lblWindow, layoutController, cardPanel, user);
            cardPanel.add(projetos, "projetos");
            layoutController = ((CardLayout) cardPanel.getLayout());
            layoutController.show(cardPanel, "projetos");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtDescriptionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescriptionFocusGained
        if (txtDescription.getText().trim().equals("Descrição")) {
            txtDescription.setText("");
            txtDescription.setForeground(normalColor);
        }
    }//GEN-LAST:event_txtDescriptionFocusGained

    private void txtDescriptionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescriptionFocusLost
        validateDescription();
    }//GEN-LAST:event_txtDescriptionFocusLost

    private void selProjectTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selProjectTypeFocusGained
        if (selProjectType.getSelectedIndex() == 0) {
            selProjectType.setForeground(normalColor);
        }
    }//GEN-LAST:event_selProjectTypeFocusGained

    private void selProjectTypeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selProjectTypeFocusLost
        validateProjectType();
    }//GEN-LAST:event_selProjectTypeFocusLost

    private void selManagerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selManagerFocusGained
        if (selManager.getSelectedIndex() == 0) {
            selManager.setForeground(normalColor);
        }
    }//GEN-LAST:event_selManagerFocusGained

    private void selManagerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selManagerFocusLost
        validateManager();
    }//GEN-LAST:event_selManagerFocusLost

    private void setTextFieldError(JTextField textField, JSeparator separator) {
        textField.setForeground(errorColor);
        separator.setForeground(errorColor);
    }

    private void setTextFieldNormal(JTextField textField, JSeparator separator) {
        textField.setForeground(normalColor);
        separator.setForeground(normalColor);
    }

    private void validateTitle() {
        String title = inpTitle.getText();
        if (title.isEmpty() || title.equals("Título")) {
            inpTitle.setText("Título");
            inpTitle.setForeground(errorColor);
            sepTitle.setForeground(errorColor);
            errorsList.add("O campo \"Título\" é obrigatório!");
        } else if (new Project().checkTitleInUse(title)) {
            if (this.project.getTitle().equals(title)) {
                setTextFieldNormal(inpTitle, sepTitle);
            } else {
                setTextFieldError(inpTitle, sepTitle);
                errorsList.add("Este tipo de atividade já está cadastrado!");
            }
        } else {
            setTextFieldNormal(inpTitle, sepTitle);
        }
    }

    private void validateProjectType() {
        int projectTypeId = selProjectType.getSelectedIndex();
        if (projectTypeId == 0) {
            selProjectType.setForeground(errorColor);
            errorsList.add("O campo \"Tipo de Projeto\" é obrigatório!");
        }
    }

    private void validateManager() {
        int managerId = selManager.getSelectedIndex();
        if (managerId == 0) {
            selManager.setForeground(errorColor);
            errorsList.add("O campo \"Gerente\" é obrigatório!");
        }
    }

    private void validateDescription() {
        String description = txtDescription.getText();
        if (description.isEmpty() || description.equals("Descrição")) {
            txtDescription.setText("Descrição");
            txtDescription.setForeground(errorColor);
            errorsList.add("O campo \"Descrição\" é obrigatório!");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel basePanel;
    private javax.swing.JButton btnSave;
    private javax.swing.JTextField inpTitle;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> listErrors;
    private javax.swing.JComboBox<String> selManager;
    private javax.swing.JComboBox<String> selProjectType;
    private javax.swing.JSeparator sepTitle;
    private javax.swing.JTextArea txtDescription;
    // End of variables declaration//GEN-END:variables
}
